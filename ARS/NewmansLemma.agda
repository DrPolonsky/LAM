open import Relations.Relations
open import Predicates
open import Logic

module ARS.NewmansLemma {A : Set } (R : ùì° A) where

open import ARS.Util
open import ARS.Properties {A}
open LocalProperties {R}


{-This file contains formalizations of Newman's lemma and variants-}

module Newmans-Lemma where

    NewmansLemma : R isSN ‚Üí R isWCR ‚Üí R isCR
    NewmansLemma RisSN RisWCR x R*xy R*xz = wCR‚ÜíConf RisWCR x (RisSN x) R*xy R*xz

module Newmans-Lemma-SM where
    LocalNewmansLemmaRecurrent : R isWCR ‚Üí SM ‚äÜ CR
    LocalNewmansLemmaRecurrent RisWCR x (SMrec .x x‚ààRec) R*xy R*xz = x ,, x‚ààRec _ R*xy , x‚ààRec _ R*xz           -- Start by casing on SR. Recurrent case is simple
    LocalNewmansLemmaRecurrent RisWCR x (SMacc .x x‚ààAcc) Œµ‚ãÜ R*xz = _ ,, R*xz , Œµ‚ãÜ                               -- Then case on the reductions, Œµ‚ãÜ cases are simple
    LocalNewmansLemmaRecurrent RisWCR x (SMacc .x x‚ààAcc) (Rxy‚ÇÅ ,‚ãÜ R*y‚ÇÅy) Œµ‚ãÜ = _ ,, Œµ‚ãÜ , (Rxy‚ÇÅ ,‚ãÜ R*y‚ÇÅy)
    LocalNewmansLemmaRecurrent RisWCR x (SMacc .x x‚ààAcc) (Rxy‚ÇÅ ,‚ãÜ R*y‚ÇÅy) (Rxz‚ÇÅ ,‚ãÜ R*z‚ÇÅz)                        -- Now apply WCR to get common reduct w
                with RisWCR x Rxy‚ÇÅ Rxz‚ÇÅ
    ... | w ,, R*y‚ÇÅw , R*z‚ÇÅw  with LocalNewmansLemmaRecurrent RisWCR _ (x‚ààAcc _ Rxy‚ÇÅ) R*y‚ÇÅy R*y‚ÇÅw               -- Recursive twice
    ... | y‚ÇÇ ,, R*yy‚ÇÇ , R*wy‚ÇÇ with LocalNewmansLemmaRecurrent RisWCR _ (x‚ààAcc _ Rxz‚ÇÅ) R*z‚ÇÅz (R*z‚ÇÅw ‚ãÜ!‚ãÜ R*wy‚ÇÇ)
    ... | z‚ÇÇ ,, R*zz‚ÇÇ , R*y‚ÇÇz‚ÇÇ = z‚ÇÇ ,, ((R*yy‚ÇÇ ‚ãÜ!‚ãÜ R*y‚ÇÇz‚ÇÇ) , R*zz‚ÇÇ)

    GlobalNewmansLemmaRecurrent : R isWCR ‚Üí R isSM ‚Üí R isCR
    GlobalNewmansLemmaRecurrent RisWCR RisSM x = LocalNewmansLemmaRecurrent RisWCR x (RisSM x)
