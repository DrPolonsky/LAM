{-# OPTIONS --guardedness #-}
module Homega.LambdaH where

-- Basic lambda calculus
open import Logic
open import Lifting
open import Lambda
open import Reduction
-- unsolvables
open import Homega.Unsolvable
-- subsets, n-ary relations, and logical operations on them
open import Predicates
-- reflexive/symmetric/transitive closures, equivalence relations
open import Relations.ClosureOperators

-- Beta-Omega conversion is the equivalence relation
-- generated by the union of ⟶β and =Ω
_=βΩ_ : ΛRel
_=βΩ_ = (_⟶β_ ∪ _=Ω_) ⁼

record _=𝓗_ {X : Set} (s t : Λ X) : Set where
  constructor 𝓗eq
  field
    lterm : Λ X
    rterm : Λ X
    lsred : s ⟶s lterm
    rpred : t ⇉⋆ rterm
    l=Ωr : lterm =Ω rterm

refl𝓗 : ∀ {X} {t : Λ X} → t =𝓗 t
refl𝓗 {X} {t} = 𝓗eq t t refl⟶s ε⋆ refl=Ω

⟶β!=𝓗 : ∀ {X} {r s t : Λ X} → r ⟶β s → s =𝓗 t → r =𝓗 t
⟶β!=𝓗 {X} {r} {s} {t} rs (𝓗eq lterm rterm lsred rpred l=Ωr)
  = 𝓗eq lterm rterm (⟶β⋆!⟶s⊆⟶s (rs ,⋆ ε⋆) lsred) rpred l=Ωr

⟶β~!=𝓗 : ∀ {X} {r s t : Λ X} → s ⟶β r → s =𝓗 t → r =𝓗 t
⟶β~!=𝓗 {X} {r} {s} {t} sr (𝓗eq lterm rterm lsred rpred l=Ωr)
  with ⟶s\⇉ lsred (⟶β⊆⇉ sr)
... | u ,, lu , ru with ⇉\=Ω lu l=Ωr
... | v ,, uv , rv = 𝓗eq u v ru (rpred ⋆!⋆ (rv ,⋆ ε⋆) ) uv

=Ω!=𝓗 : ∀ {X} {r s t : Λ X} → r =Ω s → s =𝓗 t → r =𝓗 t
=Ω!=𝓗 rs (𝓗eq lterm rterm lsred rpred l=Ωr) with =Ω/⟶s rs lsred
... | (u ,, ru , u=l) = 𝓗eq u rterm ru rpred (u=l =Ω!=Ω l=Ωr)

-- Standardization Theorem for 𝓗
=βΩ⊆𝓗 : ∀ {X} {s t : Λ X} → (s =βΩ t) → (s =𝓗 t)
=βΩ⊆𝓗 ε⋆ = refl𝓗
=βΩ⊆𝓗 {s = s} {t} (axˢ+ (in1 s→y) ,⋆ st) = ⟶β!=𝓗 s→y (=βΩ⊆𝓗 st)
=βΩ⊆𝓗 {s = s} {t} (axˢ+ (in2 s=y) ,⋆ st) = =Ω!=𝓗 s=y (=βΩ⊆𝓗 st)
=βΩ⊆𝓗 {s = s} {t} (axˢ- (in1 y→s) ,⋆ st) = ⟶β~!=𝓗 y→s (=βΩ⊆𝓗 st)
=βΩ⊆𝓗 {s = s} {t} (axˢ- (in2 y=s) ,⋆ st) = =Ω!=𝓗 (~=Ω y=s) (=βΩ⊆𝓗 st)


abs⇉⋆ : ∀ {X} {r1 r2 : Λ (↑ X)} → r1 ⇉⋆ r2 → abs r1 ⇉⋆ abs r2
abs⇉⋆ ε⋆ = ε⋆
abs⇉⋆ (x ,⋆ r12) = abs⇉ x ,⋆ abs⇉⋆ r12

-- Additional Lemmas for use later
abs𝓗 : ∀ {X} {r1 r2 : Λ (↑ X)} → r1 =𝓗 r2 → abs r1 =𝓗 abs r2
abs𝓗 (𝓗eq lterm rterm lsred rpred l=Ωr)
  = 𝓗eq (abs lterm) (abs rterm) (abs⟶s lsred ) (abs⇉⋆ rpred ) (absΩ l=Ωr )







-- The end
